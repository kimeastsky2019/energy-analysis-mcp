version: '3.8'

services:
  # PostgreSQL 데이터베이스
  postgres:
    image: postgres:13
    environment:
      POSTGRES_DB: mcp_analysis
      POSTGRES_USER: mcp_user
      POSTGRES_PASSWORD: mcp_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U mcp_user -d mcp_analysis"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis (캐싱 및 메시지 큐)
  redis:
    image: redis:6-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Forecasting MCP Server
  forecasting-mcp:
    build: .
    command: python forecasting_mcp_server.py
    environment:
      - DATABASE_URL=postgresql://mcp_user:mcp_password@postgres:5432/mcp_analysis
      - REDIS_URL=redis://redis:6379
      - MCP_SERVER_PORT=8001
    ports:
      - "8001:8001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./models:/app/models
      - ./logs:/app/logs
    restart: unless-stopped

  # Anomaly Detection MCP Server
  anomaly-mcp:
    build: .
    command: python anomaly_mcp_server.py
    environment:
      - DATABASE_URL=postgresql://mcp_user:mcp_password@postgres:5432/mcp_analysis
      - REDIS_URL=redis://redis:6379
      - MCP_SERVER_PORT=8002
    ports:
      - "8002:8002"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./models:/app/models
      - ./logs:/app/logs
    restart: unless-stopped

  # Coordinator MCP Server
  coordinator-mcp:
    build: .
    command: python coordinator_mcp_server.py
    environment:
      - DATABASE_URL=postgresql://mcp_user:mcp_password@postgres:5432/mcp_analysis
      - REDIS_URL=redis://redis:6379
      - MCP_SERVER_PORT=8003
      - FORECASTING_MCP_URL=http://forecasting-mcp:8001
      - ANOMALY_MCP_URL=http://anomaly-mcp:8002
    ports:
      - "8003:8003"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      forecasting-mcp:
        condition: service_started
      anomaly-mcp:
        condition: service_started
    volumes:
      - ./models:/app/models
      - ./logs:/app/logs
    restart: unless-stopped

  # Web Dashboard
  web-dashboard:
    build: .
    command: python web_service/app.py
    environment:
      - DATABASE_URL=postgresql://mcp_user:mcp_password@postgres:5432/mcp_analysis
      - REDIS_URL=redis://redis:6379
      - FORECASTING_MCP_URL=http://forecasting-mcp:8001
      - ANOMALY_MCP_URL=http://anomaly-mcp:8002
      - COORDINATOR_MCP_URL=http://coordinator-mcp:8003
    ports:
      - "5000:5000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      forecasting-mcp:
        condition: service_started
      anomaly-mcp:
        condition: service_started
      coordinator-mcp:
        condition: service_started
    volumes:
      - ./web_service:/app/web_service
      - ./logs:/app/logs
    restart: unless-stopped

  # REST API Service
  rest-api:
    build: .
    command: python web_service/api/rest_api.py
    environment:
      - DATABASE_URL=postgresql://mcp_user:mcp_password@postgres:5432/mcp_analysis
      - REDIS_URL=redis://redis:6379
      - FORECASTING_MCP_URL=http://forecasting-mcp:8001
      - ANOMALY_MCP_URL=http://anomaly-mcp:8002
      - COORDINATOR_MCP_URL=http://coordinator-mcp:8003
    ports:
      - "5001:5001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      forecasting-mcp:
        condition: service_started
      anomaly-mcp:
        condition: service_started
      coordinator-mcp:
        condition: service_started
    volumes:
      - ./web_service:/app/web_service
      - ./logs:/app/logs
    restart: unless-stopped

  # Nginx (리버스 프록시)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/ssl:/etc/nginx/ssl
    depends_on:
      - web-dashboard
      - rest-api
    restart: unless-stopped

  # 모니터링 (Prometheus)
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    restart: unless-stopped

  # 모니터링 (Grafana)
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/dashboards:/var/lib/grafana/dashboards
      - ./docker/grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  default:
    driver: bridge


