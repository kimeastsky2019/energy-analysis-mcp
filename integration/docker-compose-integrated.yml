version: '3.8'

services:
  # PostgreSQL 데이터베이스
  postgres:
    image: postgres:13
    environment:
      POSTGRES_DB: energy_analysis
      POSTGRES_USER: energy_user
      POSTGRES_PASSWORD: energy_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U energy_user -d energy_analysis"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis (캐싱 및 메시지 큐)
  redis:
    image: redis:6-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # 기존 Energy Analysis MCP Server
  energy-analysis-mcp:
    build:
      context: ..
      dockerfile: Dockerfile
    command: python server.py
    environment:
      - DATABASE_URL=postgresql://energy_user:energy_password@postgres:5432/energy_analysis
      - REDIS_URL=redis://redis:6379
      - OPENWEATHER_API_KEY=${OPENWEATHER_API_KEY}
      - ENERGY_MCP_PORT=8004
    ports:
      - "8004:8004"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ../data:/app/data
      - ../logs:/app/logs
    restart: unless-stopped

  # Multi-MCP Time Series Analysis System
  multi-mcp-forecasting:
    build:
      context: ../multi_mcp_system
      dockerfile: Dockerfile
    command: python forecasting_mcp_server.py
    environment:
      - DATABASE_URL=postgresql://energy_user:energy_password@postgres:5432/energy_analysis
      - REDIS_URL=redis://redis:6379
      - MCP_SERVER_PORT=8001
    ports:
      - "8001:8001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ../multi_mcp_system/models:/app/models
      - ../logs:/app/logs
    restart: unless-stopped

  multi-mcp-anomaly:
    build:
      context: ../multi_mcp_system
      dockerfile: Dockerfile
    command: python anomaly_mcp_server.py
    environment:
      - DATABASE_URL=postgresql://energy_user:energy_password@postgres:5432/energy_analysis
      - REDIS_URL=redis://redis:6379
      - MCP_SERVER_PORT=8002
    ports:
      - "8002:8002"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ../multi_mcp_system/models:/app/models
      - ../logs:/app/logs
    restart: unless-stopped

  multi-mcp-coordinator:
    build:
      context: ../multi_mcp_system
      dockerfile: Dockerfile
    command: python coordinator_mcp_server.py
    environment:
      - DATABASE_URL=postgresql://energy_user:energy_password@postgres:5432/energy_analysis
      - REDIS_URL=redis://redis:6379
      - MCP_SERVER_PORT=8003
      - FORECASTING_MCP_URL=http://multi-mcp-forecasting:8001
      - ANOMALY_MCP_URL=http://multi-mcp-anomaly:8002
    ports:
      - "8003:8003"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      multi-mcp-forecasting:
        condition: service_started
      multi-mcp-anomaly:
        condition: service_started
    volumes:
      - ../multi_mcp_system/models:/app/models
      - ../logs:/app/logs
    restart: unless-stopped

  # 통합 MCP 서버
  integrated-mcp:
    build:
      context: .
      dockerfile: Dockerfile
    command: python energy_mcp_integration.py
    environment:
      - DATABASE_URL=postgresql://energy_user:energy_password@postgres:5432/energy_analysis
      - REDIS_URL=redis://redis:6379
      - OPENWEATHER_API_KEY=${OPENWEATHER_API_KEY}
      - ENERGY_MCP_URL=http://energy-analysis-mcp:8004
      - FORECASTING_MCP_URL=http://multi-mcp-forecasting:8001
      - ANOMALY_MCP_URL=http://multi-mcp-anomaly:8002
      - COORDINATOR_MCP_URL=http://multi-mcp-coordinator:8003
    ports:
      - "8005:8005"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      energy-analysis-mcp:
        condition: service_started
      multi-mcp-forecasting:
        condition: service_started
      multi-mcp-anomaly:
        condition: service_started
      multi-mcp-coordinator:
        condition: service_started
    volumes:
      - ../data:/app/data
      - ../logs:/app/logs
    restart: unless-stopped

  # 통합 API 서버
  unified-api:
    build:
      context: .
      dockerfile: Dockerfile
    command: python unified_api.py
    environment:
      - DATABASE_URL=postgresql://energy_user:energy_password@postgres:5432/energy_analysis
      - REDIS_URL=redis://redis:6379
      - OPENWEATHER_API_KEY=${OPENWEATHER_API_KEY}
      - ENERGY_MCP_URL=http://energy-analysis-mcp:8004
      - FORECASTING_MCP_URL=http://multi-mcp-forecasting:8001
      - ANOMALY_MCP_URL=http://multi-mcp-anomaly:8002
      - COORDINATOR_MCP_URL=http://multi-mcp-coordinator:8003
      - INTEGRATED_MCP_URL=http://integrated-mcp:8005
    ports:
      - "5003:5003"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      energy-analysis-mcp:
        condition: service_started
      multi-mcp-forecasting:
        condition: service_started
      multi-mcp-anomaly:
        condition: service_started
      multi-mcp-coordinator:
        condition: service_started
      integrated-mcp:
        condition: service_started
    volumes:
      - ../data:/app/data
      - ../logs:/app/logs
    restart: unless-stopped

  # 에너지 대시보드
  energy-dashboard:
    build:
      context: .
      dockerfile: Dockerfile
    command: python energy_dashboard.py
    environment:
      - DATABASE_URL=postgresql://energy_user:energy_password@postgres:5432/energy_analysis
      - REDIS_URL=redis://redis:6379
      - OPENWEATHER_API_KEY=${OPENWEATHER_API_KEY}
      - UNIFIED_API_URL=http://unified-api:5003
    ports:
      - "5002:5002"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      unified-api:
        condition: service_started
    volumes:
      - ../data:/app/data
      - ../logs:/app/logs
    restart: unless-stopped

  # Multi-MCP 웹 대시보드
  multi-mcp-dashboard:
    build:
      context: ../multi_mcp_system
      dockerfile: Dockerfile
    command: python web_service/app.py
    environment:
      - DATABASE_URL=postgresql://energy_user:energy_password@postgres:5432/energy_analysis
      - REDIS_URL=redis://redis:6379
      - FORECASTING_MCP_URL=http://multi-mcp-forecasting:8001
      - ANOMALY_MCP_URL=http://multi-mcp-anomaly:8002
      - COORDINATOR_MCP_URL=http://multi-mcp-coordinator:8003
    ports:
      - "5000:5000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      multi-mcp-forecasting:
        condition: service_started
      multi-mcp-anomaly:
        condition: service_started
      multi-mcp-coordinator:
        condition: service_started
    volumes:
      - ../multi_mcp_system/web_service:/app/web_service
      - ../logs:/app/logs
    restart: unless-stopped

  # Multi-MCP REST API
  multi-mcp-api:
    build:
      context: ../multi_mcp_system
      dockerfile: Dockerfile
    command: python web_service/api/rest_api.py
    environment:
      - DATABASE_URL=postgresql://energy_user:energy_password@postgres:5432/energy_analysis
      - REDIS_URL=redis://redis:6379
      - FORECASTING_MCP_URL=http://multi-mcp-forecasting:8001
      - ANOMALY_MCP_URL=http://multi-mcp-anomaly:8002
      - COORDINATOR_MCP_URL=http://multi-mcp-coordinator:8003
    ports:
      - "5001:5001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      multi-mcp-forecasting:
        condition: service_started
      multi-mcp-anomaly:
        condition: service_started
      multi-mcp-coordinator:
        condition: service_started
    volumes:
      - ../multi_mcp_system/web_service:/app/web_service
      - ../logs:/app/logs
    restart: unless-stopped

  # Nginx (리버스 프록시)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx-integrated.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - energy-dashboard
      - unified-api
      - multi-mcp-dashboard
      - multi-mcp-api
    restart: unless-stopped

  # 모니터링 (Prometheus)
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus-integrated.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    restart: unless-stopped

  # 모니터링 (Grafana)
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/var/lib/grafana/dashboards
      - ./grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  default:
    driver: bridge


